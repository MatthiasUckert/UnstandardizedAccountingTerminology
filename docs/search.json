[
  {
    "objectID": "02-DatabaseMatching.html#worldscope",
    "href": "02-DatabaseMatching.html#worldscope",
    "title": "Database Item Matching",
    "section": "Worldscope",
    "text": "Worldscope\n\nIncome StatementBalance Sheet"
  },
  {
    "objectID": "02-DatabaseMatching.html#compustat",
    "href": "02-DatabaseMatching.html#compustat",
    "title": "Database Item Matching",
    "section": "Compustat",
    "text": "Compustat\n\nIncome StatementBalance Sheet"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Unstandardized Accounting Terminology",
    "section": "",
    "text": "The communication of accounting information requires a domain-specific vocabulary, and, in specialized languages, standardization is considered a key to clear communication, i.e., one term should only be assigned to one concept and vice versa. In practice, accounting terminology is unstandardized and produces undue complexity. We provide the first large-sample evidence on the level and the implications of unstandardized accounting terminology for a global corpus of annual reports. Our study shows that unstandardized accounting terminology is widespread and has economic consequences, increasing human and computerized information processing costs."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Unstandardized Accounting Terminology",
    "section": "",
    "text": "The communication of accounting information requires a domain-specific vocabulary, and, in specialized languages, standardization is considered a key to clear communication, i.e., one term should only be assigned to one concept and vice versa. In practice, accounting terminology is unstandardized and produces undue complexity. We provide the first large-sample evidence on the level and the implications of unstandardized accounting terminology for a global corpus of annual reports. Our study shows that unstandardized accounting terminology is widespread and has economic consequences, increasing human and computerized information processing costs."
  },
  {
    "objectID": "index.html#about-this-repository",
    "href": "index.html#about-this-repository",
    "title": "Unstandardized Accounting Terminology",
    "section": "About This Repository",
    "text": "About This Repository\nThis repository provides supplementary materials for our paper: Unstandardized Accounting Terminology. Datasets, concept mappings, as well as our code for company name matching available for download.\nWhat You’ll Find:\n\nTerms & Concepts: Complete accounting dictionaries constructed using top-down (authoritative sources) and bottom-up (XBRL filings) approaches. Includes term lists, concept lists showing synonyms, and frequency statistics across our global corpus of annual reports.\nDatabase Item Matching: Mappings between Compustat and Worldscope data items and our accounting concepts. These mappings enable analysis of how terminology standardization affects data collection by commercial providers.\nName Matching Package: An R package (rMatching) for fuzzy matching of firm names across databases. Developed for matching Perfect Information filings to Datastream, but applicable to any general name matching task. Available on GitHub."
  },
  {
    "objectID": "01-TermsConcepts.html",
    "href": "01-TermsConcepts.html",
    "title": "Terms & Concepts",
    "section": "",
    "text": "Overview\nWe construct two alternative accounting dictionaries following top-down and bottom-up approaches. Each dictionary consists of:\n\nTerm Lists: Unique accounting terms appearing in financial reports\nConcept Lists: Mappings showing which terms describe the same underlying accounting concepts (i.e., synonyms)\n\nTop-Down: Terms collected from IFRS, US GAAP, and UK GAAP authoritative sources and specialized accounting dictionaries. Terms explicitly classified as synonyms are grouped by concept. Lists are refined using a GPT-based procedure and manual validation, then restricted to terminology observed in our global corpus.\nBottom-Up: Terms extracted from XBRL filings on EDGAR by parsing Exhibit 101.LAB files, which map XBRL taxonomy tags to the natural language labels firms use in their reports. To reduce noise, a term must appear in at least 20 distinct filings. We apply a majority disambiguation rule, removing terms that appear in less than 5% of all filings for a given concept. An international version is created by repeating these steps for non-US firms cross-listed in the United States that file 20-F reports using the IFRS Taxonomy.\n\n\n\nTerm Lists\nComplete list of unique accounting terms identified in each dictionary. Each term has a unique identifier (TID) and n-gram count indicating whether it consists of one word, two words, etc.\n📥 Download: Excel File (2.9 MB)\n\nTop-DownBottom-Up (10-Ks)Bottom-Up (20-Fs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConcept Lists\nShows which terms are synonyms (i.e., describe the same underlying accounting concept). Terms sharing the same concept ID (CID) are used interchangeably to describe the same economic item.\n📥 Download: Excel File (2.7 MB)\n\nTop-DownBottom-Up (10-Ks)Bottom-Up (20-Fs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost Common Terms\nThe same terms as in Term Lists above, but ranked by frequency of use across all reports in our corpus. Shows how often each term appears (FREQUENCY), the number of observations (OBS), and the number of distinct firms using the term (FIRMS). This reveals which accounting terms are most prevalent in reporting practice.\n📥 Download: Excel File (5.1 MB)\n\nTop-DownBottom-Up (10-Ks)Bottom-Up (20-Fs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost Common Concepts\nThe same concepts as in Concept Lists above, but ranked by frequency and showing all synonymous terms used for each concept. For each concept, you can see the different terms firms use along with usage statistics (FREQUENCY, OBS, FIRMS). This illustrates the extent of terminology variation for the most frequently reported accounting concepts.\n📥 Download: Excel File (4.8 MB)\n\nTop-DownBottom-Up (10-Ks)Bottom-Up (20-Fs)"
  },
  {
    "objectID": "03-NameMatching.html",
    "href": "03-NameMatching.html",
    "title": "Name Matching Package",
    "section": "",
    "text": "You can install the development version of rMatching from GitHub with:\ndevtools::install_github(\"TerminologyStandardization/rMatching\")\n\n\n\nBelow The basic steps how to match two data sets by company names.\nThe package contains three build-in datasets:\n\ntable_source: The source table with company names\ntable_target: The target table with company names\ntable_matches: A table in which source and target table are already matched\n\n\n\n\n\n\n\n\nid\nname\niso3\ncity\naddress\nsize\n\n\n\n\n291C5CB8\nASM INTERNATIONAL NV\nNLD\nALMERE\nVERSTERKERSTRAAT 8\nlarge\n\n\n097A6454\nTELEFONAKTIEBOLAGET LM ERICS\nSWE\nSTOCKHOLM\nTORSHAMNSGATAN 21, KISTA\nsmall\n\n\n0CA8A1F4\nNOVO NORDISK A/S\nDNK\nBAGSVAERD\nNOVO ALLE 1\nsmall\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nname\niso3\ncity\naddress\nsize\n\n\n\n\n40D62BF9\nVOLKSWAGEN AG\nDEU\nWOLFSBURG\nBRIEFFACH 1849\nmiddle\n\n\n18162F6F\nDAIMLER AG\nDEU\nSTUTTGART\nMERCEDESSTRASSE 120\nsmall\n\n\n47F0DB5C\nBAYERISCHE MOTOREN WERKE AG\nDEU\nMUENCHEN\nPETUELRING 130\nmiddle\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_s\nid_t\nname_s\nname_t\niso3_s\niso3_t\ncity_s\ncity_t\naddress_s\naddress_t\nmatch\n\n\n\n\n291C5CB8\n1147DBEB\nASM INTERNATIONAL NV\nASM INTERNATIONAL NV\nNLD\nNLD\nALMERE\nALMERE\nVERSTERKERSTRAAT 8\nVERSTERKERSTRAAT 8\n1\n\n\n0CA8A1F4\nBACB9C1F\nNOVO NORDISK A/S\nNOVO NORDISK A/S\nDNK\nDNK\nBAGSVAERD\nBAGSVAERD\nNOVO ALLE 1\nNOVO ALLE\n1\n\n\n80DC386E\nC201D476\nKONINKLIJKE PHILIPS NV\nKONINKLIJKE PHILIPS N.V.\nNLD\nNLD\nAMSTERDAM\nAMSTERDAM\nPHILIPS CENTER, AMSTELPLEIN 2\nAMSTELPLEIN 2\n1"
  },
  {
    "objectID": "03-NameMatching.html#installation",
    "href": "03-NameMatching.html#installation",
    "title": "Name Matching Package",
    "section": "",
    "text": "You can install the development version of rMatching from GitHub with:\ndevtools::install_github(\"TerminologyStandardization/rMatching\")"
  },
  {
    "objectID": "03-NameMatching.html#build-in-tables",
    "href": "03-NameMatching.html#build-in-tables",
    "title": "Name Matching Package",
    "section": "",
    "text": "Below The basic steps how to match two data sets by company names.\nThe package contains three build-in datasets:\n\ntable_source: The source table with company names\ntable_target: The target table with company names\ntable_matches: A table in which source and target table are already matched\n\n\n\n\n\n\n\n\nid\nname\niso3\ncity\naddress\nsize\n\n\n\n\n291C5CB8\nASM INTERNATIONAL NV\nNLD\nALMERE\nVERSTERKERSTRAAT 8\nlarge\n\n\n097A6454\nTELEFONAKTIEBOLAGET LM ERICS\nSWE\nSTOCKHOLM\nTORSHAMNSGATAN 21, KISTA\nsmall\n\n\n0CA8A1F4\nNOVO NORDISK A/S\nDNK\nBAGSVAERD\nNOVO ALLE 1\nsmall\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nname\niso3\ncity\naddress\nsize\n\n\n\n\n40D62BF9\nVOLKSWAGEN AG\nDEU\nWOLFSBURG\nBRIEFFACH 1849\nmiddle\n\n\n18162F6F\nDAIMLER AG\nDEU\nSTUTTGART\nMERCEDESSTRASSE 120\nsmall\n\n\n47F0DB5C\nBAYERISCHE MOTOREN WERKE AG\nDEU\nMUENCHEN\nPETUELRING 130\nmiddle\n\n\n\n\n\n\n\n\n\n\n\n\n\nid_s\nid_t\nname_s\nname_t\niso3_s\niso3_t\ncity_s\ncity_t\naddress_s\naddress_t\nmatch\n\n\n\n\n291C5CB8\n1147DBEB\nASM INTERNATIONAL NV\nASM INTERNATIONAL NV\nNLD\nNLD\nALMERE\nALMERE\nVERSTERKERSTRAAT 8\nVERSTERKERSTRAAT 8\n1\n\n\n0CA8A1F4\nBACB9C1F\nNOVO NORDISK A/S\nNOVO NORDISK A/S\nDNK\nDNK\nBAGSVAERD\nBAGSVAERD\nNOVO ALLE 1\nNOVO ALLE\n1\n\n\n80DC386E\nC201D476\nKONINKLIJKE PHILIPS NV\nKONINKLIJKE PHILIPS N.V.\nNLD\nNLD\nAMSTERDAM\nAMSTERDAM\nPHILIPS CENTER, AMSTELPLEIN 2\nAMSTELPLEIN 2\n1"
  },
  {
    "objectID": "03-NameMatching.html#step-1-prepare-tables",
    "href": "03-NameMatching.html#step-1-prepare-tables",
    "title": "Name Matching Package",
    "section": "Step 1: Prepare Tables",
    "text": "Step 1: Prepare Tables\nTables have to be prepared with the function: prep_tables()\nInputs:\n\n.source: The Source Table - This is the table containing the names you want to match. These names will be compared to those in the target table to identify potential matches.\n.target: The Target Table - This table contains the names to which the source table names will be matched. The function aims to find corresponding names in the target table for each name in the source table.\n.fstd: Standardization Function - This is a user-defined or built-in function used to standardize the names in both source and target tables. By default, the function uses the built-in standardize_str function for this purpose.\n.dir: Data Storage Directory - This parameter specifies the directory where the processed data will be stored, allowing for easy access and review of the intermediate data files.\n.return: Return Tables as List - This is a boolean flag that determines whether the processed source and target tables should be returned as a list. If set to TRUE, the function will return the tables; otherwise, it will only store them in the specified directory.\n.verbose: Verbose Output - This boolean flag controls the display of additional information during the function’s execution. If set to TRUE, the function will print extra details, which can be useful for troubleshooting and understanding the matching process.\n\nThe relevant tables are stored in the directory (.dir)\n\n\n\n\n\ntype\nfile\n\n\n\n\nSource Table\nsdata.fst\n\n\nSource Table\nsorig.fst\n\n\nGroups\ntdata.fst\n\n\nGroups\ntorig.fst"
  },
  {
    "objectID": "03-NameMatching.html#step-2-match-data",
    "href": "03-NameMatching.html#step-2-match-data",
    "title": "Name Matching Package",
    "section": "Step 2: Match Data",
    "text": "Step 2: Match Data\nThe Matching can be now performed with the function match_data()\nInputs:\n\n.dir Data Storage Directory - This parameter specifies the directory in which the processed data will be stored. It enables easy access and review of the intermediate data files created during the matching process.\n.cols Named Vector for Columns - This parameter is a named vector containing the columns to be considered for matching. The names in the vector should be either “e” or “exact” for an exact comparison of the strings, or “f” or “fuzzy” for a fuzzy matching approach as specified by the .method argument. Names in the vector can be either quoted or unquoted, while the values must be quoted.\n.range Character Range - This parameter defines the range of characters to be considered when matching names. For example, if a name in the source table has 10 characters and .range is set to 5, any name within the 5-15 character range in the target table will be considered for matching.\n.weights Column Weights - This named vector assigns weights to each column used for matching. If not specified, all columns will be assigned equal weights by default.\n.max_match Maximum Matches - This parameter determines the maximum number of matches to be returned for each record in the source table.\n.allow_mult Multiple Match Permission - This boolean parameter indicates whether multiple matches are allowed for each record in the target table. If you want a 1-1 match, set it to FALSE; for a 1-n match, set it to TRUE.\n.method Matching Method - This parameter specifies the method to be used for matching records. It can be one of the following: “osa”, “lv”, “dl”, “hamming”, “lcs”, “qgram”, “cosine”, “jaccard”, “jw”, or “soundex”. For more information on these methods, refer to the stringdist-metrics documentation in the {stringdist} package.\n.workers Parallel Workers - This parameter defines the number of workers to be used for parallelization during the matching process.\n.mat_size Maximum Matrix Size - This parameter sets the maximum size of the similarity matrix created during the fuzzy matching process. If you are dealing with a large number of names to match, the matrix can become very large. Adjust this value to avoid overloading your system’s memory.\n.verbose Verbose Output - This boolean flag determines whether additional information is displayed during the execution of the function. If set to TRUE, the function will output extra details, which can be helpful for troubleshooting and gaining insights into the matching process.\n\nThe output looks the following:\n\n\n\n\n\nid_s\nid_t\nscore\nrank_old\nrank_new\nname_s\nname_t\niso3_s\niso3_t\ncity_s\ncity_t\naddress_s\naddress_t\nsize_s\nsize_t\n\n\n\n\n000F8750\nE48EB751\n1.0000000\n1\n1\nNTR HOLDING A/S\nNTR HOLDING A/S\nDNK\nDNK\nCOPENHAGEN\nCOPENHAGEN\nBREDGADE 30\nSANKT ANNAE PLADS 13 3\nmiddle\nmiddle\n\n\n000F8750\n1749518D\n0.6686869\n2\n2\nNTR HOLDING A/S\nNEWCAP HOLDING A/S\nDNK\nDNK\nCOPENHAGEN\nKOBENHAVN K\nBREDGADE 30\nBREDGADE 30\nmiddle\nmiddle\n\n\n000F8750\n6A2ED2E8\n0.5789474\n4\n3\nNTR HOLDING A/S\nLOYAL SOLUTIONS A/S\nDNK\nDNK\nCOPENHAGEN\nCOPENHAGEN\nBREDGADE 30\nROBERT JACOBSENS VEJ 68\nmiddle\nmiddle\n\n\n002FCAB5\nFF136D09\n1.0000000\n1\n1\nVIROGATES A/S\nVIROGATES A/S\nDNK\nDNK\nBIRKEROD\nBIRKEROD\nBANEVAENGET 13\nBLOKKEN 45\nlarge\nlarge\n\n\n002FCAB5\n45C4AE7D\n0.3942308\n3\n2\nVIROGATES A/S\nPHOTOCAT A/S\nDNK\nDNK\nBIRKEROD\nROSKILDE\nBANEVAENGET 13\nLANGEBJERG 4\nlarge\nlarge\n\n\n0051857E\n9E944051\n0.7600000\n1\n1\nGAUMONT SA\nGAUMONT\nFRA\nFRA\nNEUILLY-SUR-SEINE\nNEUILLY-SUR-SEINE\n30, AVENUE CHARLES DE GAULLE\n30, AVENUE CHARLES DE GAULLE\nmiddle\nmiddle\n\n\n\n\n\nThe output contains the following relevant columns: id_s: The ID of the source table id_t: The ID of the target table score: similarity score rank_old: Unadjusted Rank rank_new: Adjusted Rank (only relevant if .allow_mult = FALSE, than the rank will consider the best match of a name considering all the other matches)\nNote _t stands for the column in the target table and _s for the columns in the source table\nThe matching is now already stored, so if you just want to change for example the weights, the calculation will be almost instant.\nBut if you want to change the columns, the function has to cache another matching"
  }
]