---
title: "Name Matching Package"
---

# rMatching

<!-- badges: start -->

<!-- badges: end -->

## Installation

You can install the development version of rMatching from [GitHub](https://github.com/) with:

```{r}
# install.packages("devtools")
# devtools::install_github("TerminologyStandardization/rMatching")
```

## Build-In Tables

Below The basic steps how to match two data sets by company names.

```{r example, message=FALSE, warning=FALSE}
library(rMatching)
library(tidyverse)
library(tictoc)
```

The package contains three build-in datasets:

-   `table_source`: The source table with company names

-   `table_target`: The target table with company names

-   `table_matches`: A table in which source and target table are already matched

### table_source

```{r echo=FALSE}
head(table_source, 3) %>%
  knitr::kable() %>%
  kableExtra::kable_paper() %>%
  kableExtra::kable_styling(font_size = 10, full_width = TRUE)
```

### table_target

```{r echo=FALSE}
head(table_target, 3) %>%
  knitr::kable() %>%
  kableExtra::kable_paper() %>%
  kableExtra::kable_styling(font_size = 10, full_width = TRUE)
```

### table_matches

```{r echo=FALSE}
head(table_matches, 3) %>%
  knitr::kable() %>%
  kableExtra::kable_paper() %>%
  kableExtra::kable_styling(font_size = 10, full_width = TRUE)
```

# Name Matching Pipeline

## Step 1: Prepare Tables

Tables have to be prepared with the function: **prep_tables()**

**Inputs:**

1.  **`.source`**: The Source Table - This is the table containing the names you want to match. These names will be compared to those in the target table to identify potential matches.

2.  **`.target`**: The Target Table - This table contains the names to which the source table names will be matched. The function aims to find corresponding names in the target table for each name in the source table.

3.  **`.fstd`**: Standardization Function - This is a user-defined or built-in function used to standardize the names in both source and target tables. By default, the function uses the built-in **`standardize_str`** function for this purpose.

4.  **`.dir`**: Data Storage Directory - This parameter specifies the directory where the processed data will be stored, allowing for easy access and review of the intermediate data files.

5.  **`.return`**: Return Tables as List - This is a boolean flag that determines whether the processed source and target tables should be returned as a list. If set to **`TRUE`**, the function will return the tables; otherwise, it will only store them in the specified directory.

6.  **`.verbose`**: Verbose Output - This boolean flag controls the display of additional information during the function's execution. If set to **`TRUE`**, the function will print extra details, which can be useful for troubleshooting and understanding the matching process.

```{r}
rMatching::prep_tables(
  .source = table_source,
  .target = table_target,
  .fstd = standardize_str,
  .dir = "_debug_data",
  .return = FALSE,
  .verbose = TRUE
)
```

The relevant tables are stored in the directory (.dir)

```{r echo=FALSE}
tibble::tibble(file = list.files("_debug_data/tables/")) %>%
  dplyr::mutate(type = case_when(
    startsWith(file, "s") ~ "Source Table",
    startsWith(file, "s") ~ "Target Table",
    TRUE ~ "Groups"
  )) %>%
  dplyr::select(type, file) %>%
  knitr::kable() %>%
  kableExtra::kable_paper() %>%
  kableExtra::kable_styling(font_size = 10, full_width = TRUE)
```

## Step 2: Match Data

The Matching can be now performed with the function **match_data()**

Inputs:

1.  **`.dir`** Data Storage Directory - This parameter specifies the directory in which the processed data will be stored. It enables easy access and review of the intermediate data files created during the matching process.

2.  **`.cols`** Named Vector for Columns - This parameter is a named vector containing the columns to be considered for matching. The names in the vector should be either "e" or "exact" for an exact comparison of the strings, or "f" or "fuzzy" for a fuzzy matching approach as specified by the .method argument. Names in the vector can be either quoted or unquoted, while the values must be quoted.

3.  **`.range`** Character Range - This parameter defines the range of characters to be considered when matching names. For example, if a name in the source table has 10 characters and .range is set to 5, any name within the 5-15 character range in the target table will be considered for matching.

4.  **`.weights`** Column Weights - This named vector assigns weights to each column used for matching. If not specified, all columns will be assigned equal weights by default.

5.  **`.max_match`** Maximum Matches - This parameter determines the maximum number of matches to be returned for each record in the source table.

6.  **`.allow_mult`** Multiple Match Permission - This boolean parameter indicates whether multiple matches are allowed for each record in the target table. If you want a 1-1 match, set it to FALSE; for a 1-n match, set it to TRUE.

7.  **`.method`** Matching Method - This parameter specifies the method to be used for matching records. It can be one of the following: "osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw", or "soundex". For more information on these methods, refer to the stringdist-metrics documentation in the {stringdist} package.

8.  **`.workers`** Parallel Workers - This parameter defines the number of workers to be used for parallelization during the matching process.

9.  **`.mat_size`** Maximum Matrix Size - This parameter sets the maximum size of the similarity matrix created during the fuzzy matching process. If you are dealing with a large number of names to match, the matrix can become very large. Adjust this value to avoid overloading your system's memory.

10. **`.verbose`** Verbose Output - This boolean flag determines whether additional information is displayed during the execution of the function. If set to TRUE, the function will output extra details, which can be helpful for troubleshooting and gaining insights into the matching process.

```{r}
match1 <- rMatching::match_data(
  .dir = "_debug_data",
  .cols = c(f = "name", e = "iso3", f = "city", f = "address", e = "size"),
  .range = 10,
  .weights = c(name = 0.8, city = 0.1, city = 0.1),
  .max_match = 25,
  .allow_mult = FALSE,
  .method = "osa",
  .workers = 4,
  .mat_size = 1e6,
  .verbose = TRUE
)
```

The output looks the following:

```{r echo=FALSE}
head(match1) %>%
  knitr::kable() %>%
  kableExtra::kable_paper() %>%
  kableExtra::kable_styling(font_size = 10, full_width = TRUE)
```

The output contains the following relevant columns: id_s: The ID of the source table id_t: The ID of the target table score: similarity score rank_old: Unadjusted Rank rank_new: Adjusted Rank (only relevant if .allow_mult = FALSE, than the rank will consider the best match of a name considering all the other matches)

Note \_t stands for the column in the target table and \_s for the columns in the source table

The matching is now already stored, so if you just want to change for example the weights, the calculation will be almost instant.

```{r}
match2 <- rMatching::match_data(
  .dir = "_debug_data",
  .cols = c(f = "name", e = "iso3", f = "city", f = "address", e = "size"),
  .range = 10,
  .weights = c(name = 0.5, city = 0.4, city = 0.1), # Changed Weights
  .max_match = 25,
  .allow_mult = FALSE,
  .method = "osa",
  .workers = 4,
  .mat_size = 1e6,
  .verbose = TRUE 
)
```

But if you want to change the columns, the function has to cache another matching

```{r}
match3 <- rMatching::match_data(
  .dir = "_debug_data",
  .cols = c(f = "name", e = "iso3", f = "city", f = "address"),
  .range = 10,
  .weights = c(name = 0.5, city = 0.4, city = 0.1),
  .max_match = 25,
  .allow_mult = FALSE,
  .method = "osa",
  .workers = 4,
  .mat_size = 1e6,
  .verbose = TRUE
)
```

# Deduplicating Matches

The Outputs of the matching tables is still not unique. We can easily deduplicate them by setting rank_new ==

```{r}
match1_unique <- dplyr::filter(match1, rank_new == 1)
match2_unique <- dplyr::filter(match2, rank_new == 1)
match3_unique <- dplyr::filter(match3, rank_new == 1)
```

we can quickly check that we have unique 1-1 matches with the function filter_dups() which return s a dataframe with all duplicates

```{r}
nrow(rMatching::filter_dups(match1_unique, id_s, id_t))
nrow(rMatching::filter_dups(match2_unique, id_s, id_t))
nrow(rMatching::filter_dups(match3_unique, id_s, id_t))
```

# Matching Comparison

Let us now see how good the matching library performs. We calculated 3 different matches which we stored in match1, match2, and match3.

First we load the pre-stored matches and combine all the matches to a single table

```{r}
.matches <- dplyr::select(dplyr::mutate(table_matches, match = 1), id_s, id_t, match)
```

```{r}
tab_matches <- dplyr::bind_rows(
  dplyr::mutate(match1_unique, no = "1. Match"),
  dplyr::mutate(match2_unique, no = "2. Match"),
  dplyr::mutate(match3_unique, no = "3. Match")
)
```

```{r}
tab_comparison <- dplyr::left_join(tab_matches, .matches, by = c("id_s", "id_t")) %>%
  tidyr::replace_na(list(match = 0)) %>%
  dplyr::group_by(no) %>%
  dplyr::summarise(p = sum(match) / dplyr::n())
```

```{r echo=FALSE}
tab_comparison %>%
  dplyr::mutate(label = scales::percent(p, .1)) %>%
  ggplot2::ggplot(aes(no, p)) +
  ggplot2::geom_col(fill = "blue", color = "black") +
  ggthemes::geom_rangeframe(sides = "b") +
  ggthemes::theme_tufte() +
  ggplot2::scale_y_continuous(labels = scales::percent, name = "Percentage of Accurate Matches") +
  ggplot2::geom_text(ggplot2::aes(label = label), vjust = 1.5, colour = "white", size = 3.5) +
  ggplot2::scale_x_discrete(name = NULL) +
  ggplot2::ggtitle("Matching Comparisons")
```
